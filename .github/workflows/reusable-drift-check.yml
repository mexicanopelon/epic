name: Reusable Drift Detection

on:
  workflow_call:
    inputs:
      TF_WORKSPACE:
        required: true
        type: string
      TF_DIR:
        required: true
        type: string
      TF_PROJECT_TITLE:
        required: true
        type: string  
    outputs:
      TF_PLAN_EXIT_CODE:
        description: "Terraform Plan Exit Code"
        value: ${{ jobs.call-reusable-tf-plan.outputs.TF_PLAN_EXIT_CODE }}

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  call-reusable-tf-plan:
    uses: ./.github/workflows/reusable-tf-plan.yml
    with:
        TF_WORKSPACE: ${{ inputs.TF_WORKSPACE }}
        TF_DIR: ${{ inputs.TF_DIR }}
    secrets: inherit

  drift-report:
    name: 'Drift Report'
    runs-on: ubuntu-latest
    needs: call-reusable-tf-plan

    # Set working directory
    defaults:
      run:
        shell: bash

    steps:
      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ needs.call-reusable-tf-plan.outputs.TF_PLAN_OUTPUT }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # If changes are detected, create a new issue
      - name: Publish Drift Report, Create a New Issue
        if: ${{ needs.call-reusable-tf-plan.outputs.TF_PLAN_EXIT_CODE }} == 2
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ needs.call-reusable-tf-plan.outputs.TF_PLAN_OUTPUT }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              const title = '${{ inputs.TF_PROJECT_TITLE }} Drift Detected';
              const creator = 'github-actions[bot]'
            
              // Look to see if there is an existing drift issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                creator: creator,
                title: title
              })

              var match_found = new Boolean(false)
              var index = 0

              if ( issues.data.length > 0 ) {
                while ( index < issues.data.length ) {
                  var issue = issues.data[index];
                  
                  if ( issue.title == title ) {
                    match_found = true
                    break
                  } else {
                    index++
                  }
                }
              }
                
              if (match_found == true) {
                var issue_match = issues.data[index]

                if ( issue_match.body == body ) {
                  console.log('Drift Detected: Found matching issue with duplicate content')
                } else {
                  console.log('Drift Detected: Found matching issue, updating body')
                  github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_match.number,
                    body: body
                  })
                }
              } else {
                console.log('Drift Detected: Creating new issue')

                github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body
                })
              }
              
      # If changes aren't detected, close any open drift issues
      - name: No Changes Detected, Close Any Open Drift Issues
        if: ${{ needs.call-reusable-tf-plan.outputs.TF_PLAN_OUTPUT }} == 0
        uses: actions/github-script@v7
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const title = '${{ inputs.TF_PROJECT_TITLE }} Drift Detected';
              const creator = 'github-actions[bot]'
            
              // Look to see if there is an existing drift issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                creator: creator,
                title: title
              })

              var match_found = new Boolean(false)
              var index = 0

              if ( issues.data.length > 0 ) {
                while ( index < issues.data.length ) {
                  var issue = issues.data[index];
                  
                  if ( issue.title == title ) {
                    match_found = true
                    break
                  } else {
                    index++
                  }
                }
              }

              if (match_found == true) {
                var issue_match = issues.data[index]
                  
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_match.number,
                  state: 'closed'
                })
              }

      # Mark the workflow as failed if drift detected 
      - name: Error on Failure
        if: ${{ needs.call-reusable-tf-plan.outputs.TF_PLAN_OUTPUT }} == 2
        run: exit 1