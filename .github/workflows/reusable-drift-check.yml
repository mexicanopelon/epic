name: Reusable Drift Detection

on:
  workflow_call:
    inputs:
      TF_WORKSPACE:
        required: true
        type: string
      TF_DIR:
        required: true
        type: string
      TF_PROJECT_TITLE:
        required: true
        type: string  
    outputs:
      TF_PLAN_EXIT_CODE:
        description: "Terraform Plan Exit Code"
        value: ${{ jobs.call-reusable-tf-plan.outputs.TF_PLAN_EXIT_CODE }}

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  drift-report:
    name: 'Drift Report'
    runs-on: ubuntu-latest

    # Set working directory
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.TF_DIR }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Set TF_WORKSPACE Environment Variable
    - name: Set TF_WORKSPACE Environment Variable
      run: echo "TF_WORKSPACE=${{ inputs.TF_WORKSPACE }}" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # List the Terraform workspaces to verify the correct one is selected.
    - name: Terraform List Workspace
      run: terraform workspace list

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -var-file ${{ inputs.TF_WORKSPACE }}.tfvars -out ${{ github.sha }}.tfplan || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.sha }}-tfplan
        path: ${{ inputs.TF_DIR }}/${{ github.sha }}.tfplan
        if-no-files-found: error
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color ${{ github.sha }}.tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
